{"version":3,"sources":["dfs.js"],"names":["Node","Algorithm","DepthFirstSearch","constructor","nodes","super","this","rows","stateManager","getRows","cols","getCols","startNode","find","node","is_start","finishNode","is_finish","get_1d_index","row","col","solve","distance","Infinity","is_visited","prev","openSet","length","closest","pop","closestIndex","is_wall","steps","push","type","indices","updateNeighbors","dfsGetPath","current","shortestPath","curr","unshift","neighbors","getNeighbors","neighbor","index","filter"],"mappings":"OAAOA,SAAU,yBACVC,cAAe,gCAEP,MAAMC,yBAAyBD,UAE1CE,WAAAA,CAAYC,GACRC,MAAMD,GAENE,KAAKC,KAAOD,KAAKE,aAAaC,UAC9BH,KAAKI,KAAOJ,KAAKE,aAAaG,UAC9BL,KAAKM,UAAYR,EAAMS,MAAMC,GAASA,EAAKC,WAC3CT,KAAKU,WAAaZ,EAAMS,MAAMC,GAASA,EAAKG,YAC5CX,KAAKY,aAAe,CAACC,EAAKC,IAAQD,EAAMb,KAAKI,KAAOU,CACvD,CAEDC,KAAAA,GACI,IAAK,IAAIP,KAAQR,KAAKF,MAClBU,EAAKQ,SAAWC,IAChBT,EAAKU,YAAa,EAClBV,EAAKW,KAAO,KAIhB,IAFAnB,KAAKoB,QAAU,CAACpB,KAAKM,WAEZN,KAAKoB,QAAQC,QAAQ,CAC1B,IAAIC,EAAUtB,KAAKoB,QAAQG,MAC3B,GAAID,GAAWtB,KAAKU,WAAY,MAEhC,IAAIc,EAAexB,KAAKY,aAAaU,EAAQT,IAAKS,EAAQR,KAEtDQ,EAAQJ,YAAcI,EAAQG,UAElCH,EAAQJ,YAAa,EACrBlB,KAAK0B,MAAMC,KAAK,CACZC,KAAM,UACNC,QAAS,CAACL,KAGdxB,KAAK8B,gBAAgBR,GACxB,CAOD,OALAtB,KAAK0B,MAAMC,KAAK,CACZC,KAAM,SACNC,QAAS7B,KAAK+B,eAGX/B,KAAK0B,KACf,CAEDK,UAAAA,CAAWC,EAAUhC,KAAKU,YACtB,MAAMuB,EAAe,GACrB,IAAIC,EAAOF,EAEX,KAAgB,OAATE,GACHD,EAAaE,QAAQnC,KAAKY,aAAasB,EAAKrB,IAAKqB,EAAKpB,MACtDoB,EAAOA,EAAKf,KAEhB,OAAOc,CACV,CAEDH,eAAAA,CAAgBtB,GACZ,MAAM4B,EAAYpC,KAAKqC,aAAa7B,GAEpC,IAAK,MAAM8B,KAAYF,EAAW,CAC9B,MAAMG,EAAQvC,KAAKY,aAAa0B,EAASzB,IAAKyB,EAASxB,KACvDwB,EAASnB,KAAOX,EAChB8B,EAAStB,UAAY,GACrBhB,KAAK0B,MAAMC,KAAK,CAAEC,KAAM,UAAWC,QAAS,CAACU,KAC7CvC,KAAKoB,QAAQO,KAAKW,EACrB,CACJ,CAEDD,YAAAA,CAAa7B,GAET,MAAM4B,EAAY,IACZvB,IAAEA,EAAFC,IAAOA,GAAQN,GACfP,KAAEA,EAAFG,KAAQA,GAASJ,KAWvB,OATIc,EAAM,GACNsB,EAAUT,KAAK3B,KAAKF,MAAME,KAAKY,aAAaC,EAAKC,EAAM,KACvDA,EAAMV,EAAO,GACbgC,EAAUT,KAAK3B,KAAKF,MAAME,KAAKY,aAAaC,EAAKC,EAAM,KACvDD,EAAM,GACNuB,EAAUT,KAAK3B,KAAKF,MAAME,KAAKY,aAAaC,EAAM,EAAGC,KACrDD,EAAMZ,EAAO,GACbmC,EAAUT,KAAK3B,KAAKF,MAAME,KAAKY,aAAaC,EAAM,EAAGC,KAElDsB,EAAUI,QACZF,IAAcA,EAASpB,aAAeoB,EAASb,SAEvD","file":"dfs.js","sourcesContent":["import Node from \"../node/Node.js\";\nimport Algorithm from \"./Algorithm.js\";\n\nexport default class DepthFirstSearch extends Algorithm {\n    /**@param {Node[]} nodes  */\n    constructor(nodes) {\n        super(nodes);\n\n        this.rows = this.stateManager.getRows();\n        this.cols = this.stateManager.getCols();\n        this.startNode = nodes.find((node) => node.is_start);\n        this.finishNode = nodes.find((node) => node.is_finish);\n        this.get_1d_index = (row, col) => row * this.cols + col;\n    }\n\n    solve() {\n        for (let node of this.nodes) {\n            node.distance = Infinity;\n            node.is_visited = false;\n            node.prev = null;\n        }\n        this.openSet = [this.startNode];\n\n        while (!!this.openSet.length) {\n            let closest = this.openSet.pop();\n            if (closest == this.finishNode) break;\n\n            let closestIndex = this.get_1d_index(closest.row, closest.col);\n\n            if (closest.is_visited || closest.is_wall) continue;\n\n            closest.is_visited = true;\n            this.steps.push({\n                type: \"visited\",\n                indices: [closestIndex],\n            });\n\n            this.updateNeighbors(closest);\n        }\n\n        this.steps.push({\n            type: \"finish\",\n            indices: this.dfsGetPath(),\n        });\n\n        return this.steps;\n    }\n\n    dfsGetPath(current = this.finishNode) {\n        const shortestPath = [];\n        let curr = current;\n\n        while (curr !== null) {\n            shortestPath.unshift(this.get_1d_index(curr.row, curr.col));\n            curr = curr.prev;\n        }\n        return shortestPath;\n    }\n\n    updateNeighbors(node) {\n        const neighbors = this.getNeighbors(node);\n\n        for (const neighbor of neighbors) {\n            const index = this.get_1d_index(neighbor.row, neighbor.col);\n            neighbor.prev = node;\n            neighbor.distance = -12;\n            this.steps.push({ type: \"updated\", indices: [index] });\n            this.openSet.push(neighbor);\n        }\n    }\n\n    getNeighbors(node) {\n        /**@type {Node[]} */\n        const neighbors = [];\n        const { row, col } = node;\n        const { rows, cols } = this;\n\n        if (col > 0)\n            neighbors.push(this.nodes[this.get_1d_index(row, col - 1)]);\n        if (col < cols - 1)\n            neighbors.push(this.nodes[this.get_1d_index(row, col + 1)]);\n        if (row > 0)\n            neighbors.push(this.nodes[this.get_1d_index(row - 1, col)]);\n        if (row < rows - 1)\n            neighbors.push(this.nodes[this.get_1d_index(row + 1, col)]);\n\n        return neighbors.filter(\n            (neighbor) => !neighbor.is_visited && !neighbor.is_wall\n        );\n    }\n}\n"]}