import Node from"../node/Node.js";import Algorithm from"./Algorithm.js";export default class BreadthFirstSearch extends Algorithm{constructor(s){super(s),this.rows=this.stateManager.getRows(),this.cols=this.stateManager.getCols(),this.startNode=s.find((s=>s.is_start)),this.finishNode=s.find((s=>s.is_finish)),this.get_1d_index=(s,t)=>s*this.cols+t}solve(){for(let s of this.nodes)s.distance=1/0,s.is_visited=!1,s.prev=null;for(this.queue=[this.startNode];this.queue.length;){let s=this.queue.shift();if(s===this.finishNode)break;let t=this.get_1d_index(s.row,s.col);s.is_visited||s.is_wall||(s.is_visited=!0,this.steps.push({type:"visited",indices:[t]}),this.updateNeighbors(s))}return this.steps.push({type:"finish",indices:this.bfsGetPath()}),this.steps}bfsGetPath(){const s=[];let t=this.finishNode;for(;null!==t;)s.unshift(this.get_1d_index(t.row,t.col)),t=t.prev;return s}updateNeighbors(s){const t=this.getNeighbors(s);for(const i of t){const t=this.get_1d_index(i.row,i.col);i.prev=s,i.distance=-12,this.steps.push({type:"updated",indices:[t]}),this.queue.push(i)}}getNeighbors(s){const t=[],{row:i,col:e}=s,{rows:h,cols:o}=this;return i>0&&t.push(this.nodes[this.get_1d_index(i-1,e)]),i<h-1&&t.push(this.nodes[this.get_1d_index(i+1,e)]),e>0&&t.push(this.nodes[this.get_1d_index(i,e-1)]),e<o-1&&t.push(this.nodes[this.get_1d_index(i,e+1)]),t.filter((s=>!s.is_visited&&!s.is_wall))}}
//# sourceMappingURL=bfs.js.map