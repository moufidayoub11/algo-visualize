import StateManager from"../StateManager.js";import AlgorithmsManager from"../algorithms/AlgorithmsManager.js";import Utils from"../utils/Utils.js";const VISITED_COLOR="rgba(0, 0, 66, 0.75)",CLOSED_COLOR="rgba(0, 190, 218, 0.75)";export default class GridAnimator{constructor(){this.stateManager=new StateManager}async visualize(t){if(this.state=this.stateManager.getState(),this.nodes=this.stateManager.getNodes(),this.nodesElements=this.stateManager.getNodeElements(),this.dynamicSleepTime=500/this.nodes.length,this.state||!this.nodes.length||!this.nodesElements.length)return;this.stateManager.setState(!0);const e=new AlgorithmsManager(this.stateManager.getNodes());let s=[];switch(t){case"dijkstra":s=e.dijkstra();break;case"astar":s=e.aStar();break;case"dfs":s=e.depthFS();break;case"bfs":s=e.breadthFS();break;case"gol":s=e.gol()}for(const t of s)console.count("step"),await this.performStep(t);this.stateManager.setState(!1)}async performStep(t){const{type:e,indices:s}=t;"visited"===e?await this.animateVisited(s[0]):"updated"==e?await this.animateUpdated(s[0]):"golGeneration"===e?await this.animateGolGeneration(t.generation):"finish"===e&&await this.animateFinish(s)}async animateVisited(t){let e=this.nodes[t],s=this.nodesElements[t];e.is_finish||e.is_start||(s.style.backgroundColor=VISITED_COLOR,await Utils.sleep(this.dynamicSleepTime))}async animateGolGeneration(t){for(let e=0;e<t.length;e++){const{type:s,index:a}=t[e];let i=this.nodes[a];if(i.is_finish||i.is_start)continue;let n=this.nodesElements[a];Utils.sleep(this.dynamicSleepTime*e*2).then((()=>{n.classList.toggle("node-wall","kill"!=s)}))}}async animateUpdated(t){let e=this.nodes[t],s=this.nodesElements[t];!e||e.is_finish||e.is_start||e.is_wall||(s.style.backgroundColor=CLOSED_COLOR)}async animateFinish(t){let e=null,s=null;for(let a=0;a<t.length;a++){const i=t[a],n=this.nodesElements[i];n.classList.contains("node-start")&&(e=n),Utils.manipulateClasses(n,["node-path"]),n.classList.contains("node-finish")||Utils.manipulateClasses(n,["node-start"]),s&&Utils.manipulateClasses(s,[],["node-start"]),s=n,await Utils.sleep(10*this.dynamicSleepTime)}s&&e&&(await Utils.sleep(10*this.dynamicSleepTime),Utils.manipulateClasses(s,[],["node-start"]),Utils.manipulateClasses(e,["node-start"]))}}
//# sourceMappingURL=GridAnimator.js.map