import StateManager from"../StateManager.js";import Node from"../node/Node.js";import Utils from"../utils/Utils.js";const VISITED_COLOR="rgba(0, 0, 66, 0.75)",CLOSED_COLOR="rgba(0, 190, 218, 0.75)";export default class GridCreator{constructor(){this.stateManager=new StateManager,this.gridElement=this.stateManager.getGridElement(),this.nodes=[],this.nodesElements=[],this.is_mouse_pressed=!1,this.add_wall=!1,this.currently_moving=null,this.last_hoverd_node=null}createGrid(){if(this.stateManager.getState())return;this.stateManager.setState(!0),this.rows=this.stateManager.getRows(),this.cols=this.stateManager.getCols(),this.createNodes();const s=this.gridElement;s.innerHTML="",this.nodesElements=[];for(let t=0;t<this.rows;t++){const e=document.createElement("tr");for(let s=0;s<this.cols;s++){const i=document.createElement("td");i.id=`node-${t}-${s}`,i.className="node";const o=this.nodes[t*this.cols+s];(o.is_start||o.is_finish)&&Utils.sleep(250).then((()=>{i.classList.add(o.is_start?"node-start":"node-finish")})),this.nodesElements.push(i),e.appendChild(i)}s.appendChild(e)}this.stateManager.setState(!1),this.stateManager.setNodeElements(this.nodesElements)}createNodes(){this.nodes=[];const s=Math.floor(this.rows/2),t=Math.floor(this.cols/4),e=Math.floor(2*this.cols/3);for(let i=0;i<this.rows*this.cols;i++){let o=Math.floor(i/this.cols),n=i%this.cols;const a=new Node(o,n,o===s&&n==t,o===s&&n==e);this.nodes.push(a)}this.stateManager.setNodes(this.nodes)}async addRandomWalls(){await this.clearGrid();let s=[["obstacle",30],["nonobstacle",100]];for(let t=0;t<this.cols*this.rows;t++){const e=this.nodes[t],i=this.nodesElements[t];if(e.is_start||e.is_finish)continue;Utils.weightedRandom(s)&&(e.is_wall=!0,Utils.manipulateClasses(i,["node-wall"]))}}handleAlgoChange(s,t){if(this.stateManager.getState())return;this.clearPaths();const e=this.nodes.find((s=>s.is_start)),i=this.nodes.find((s=>s.is_finish)),o=this.nodesElements[e.row*this.cols+e.col],n=this.nodesElements[i.row*this.cols+i.col];o.classList.toggle("node-start",!["gol"].includes(s)),n.classList.toggle("node-finish",!["gol"].includes(s)),console.log(s),console.log(t),["gol"].includes(t)&&!["gol"].includes(s)&&this.clearGrid()}async clearGrid(){if(this.stateManager.getState())return;this.stateManager.setState(!0),this.clearPaths();let s=[];for(let t=0;t<this.nodes.length;t++){const e=this.nodes[t],i=this.nodesElements[t];if(!e.is_wall&&!i.classList.contains("node-wall"))continue;console.log("found wall"),e.is_wall=!1;let o=i.classList;s.push(Utils.sleep(Math.floor(t)).then((()=>{o.remove("node-wall")})))}await Promise.all(s),this.stateManager.setState(!1)}clearPaths(){if(this.nodes)for(let s=0;s<this.nodes.length;s++){const t=this.nodesElements[s];[VISITED_COLOR,CLOSED_COLOR].includes(t.style.backgroundColor)&&(t.style.backgroundColor="var(--ghost-white)"),t.classList.remove("node-path")}}async handleEvents(s,t){if(this.stateManager.getState())return;s.preventDefault();const e=s.target;if(!e||"TD"!==e.nodeName)return;let i=parseInt(e.id.split("-")[1]),o=parseInt(e.id.split("-")[2]),n=this.nodes[i*this.cols+o];const a=e.classList;switch(t){case"mousedown":this.is_mouse_pressed=!0,this.clearPaths(),a.contains("node-start")?(n.is_start=!1,a.remove("node-start"),this.currently_moving="node-start",this.last_hoverd_node=e):a.contains("node-finish")?(n.is_finish=!1,a.remove("node-finish"),this.currently_moving="node-finish",this.last_hoverd_node=e):(this.add_wall=!a.contains("node-wall"),a.toggle("node-wall",this.add_wall),n.is_wall=this.add_wall);break;case"mousemove":if(!this.is_mouse_pressed)return;this.currently_moving?(this.last_hoverd_node&&this.last_hoverd_node.classList.remove(this.currently_moving),a.add(this.currently_moving),this.last_hoverd_node=e):a.contains("node-start")||a.contains("node-finish")||(n.is_wall=this.add_wall,a.toggle("node-wall",this.add_wall));break;case"mouseup":if(this.is_mouse_pressed=!1,this.add_wall=!1,this.currently_moving&&this.last_hoverd_node){let s=parseInt(this.last_hoverd_node.id.split("-")[1]),t=parseInt(this.last_hoverd_node.id.split("-")[2]);const e=this.nodes[s*this.cols+t];this.last_hoverd_node.classList.contains("node-wall")&&(e.is_wall=!1,this.last_hoverd_node.classList.remove("node-wall")),e.is_start="node-start"==this.currently_moving,e.is_finish="node-finish"==this.currently_moving,this.last_hoverd_node.classList.add(this.currently_moving)}this.currently_moving=null,this.last_hoverd_node=null}}}
//# sourceMappingURL=GridCreator.js.map